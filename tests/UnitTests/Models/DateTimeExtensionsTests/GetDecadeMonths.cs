using System.Globalization;
using Models;

namespace UnitTests.Models.DateTimeExtensionsTests;

public sealed class GetDecadeMonths
{
    [Fact]
    
    public void Returns_YearAndMonths_ForADecade_Given_DateTime()
    {   
        var dateTime = new DateTime(2024, 03, 02, calendar: new GregorianCalendar());
        var expected = new[]
        {
            new Month(new Year(2021), 1),
            new Month(new Year(2021), 2),
            new Month(new Year(2021), 3),
            new Month(new Year(2021), 4),
            new Month(new Year(2021), 5),
            new Month(new Year(2021), 6),
            new Month(new Year(2021), 7),
            new Month(new Year(2021), 8),
            new Month(new Year(2021), 9),
            new Month(new Year(2021), 10),
            new Month(new Year(2021), 11),
            new Month(new Year(2021), 12),
            new Month(new Year(2022), 1),
            new Month(new Year(2022), 2),
            new Month(new Year(2022), 3),
            new Month(new Year(2022), 4),
            new Month(new Year(2022), 5),
            new Month(new Year(2022), 6),
            new Month(new Year(2022), 7),
            new Month(new Year(2022), 8),
            new Month(new Year(2022), 9),
            new Month(new Year(2022), 10),
            new Month(new Year(2022), 11),
            new Month(new Year(2022), 12),
            new Month(new Year(2023), 1),
            new Month(new Year(2023), 2),
            new Month(new Year(2023), 3),
            new Month(new Year(2023), 4),
            new Month(new Year(2023), 5),
            new Month(new Year(2023), 6),
            new Month(new Year(2023), 7),
            new Month(new Year(2023), 8),
            new Month(new Year(2023), 9),
            new Month(new Year(2023), 10),
            new Month(new Year(2023), 11),
            new Month(new Year(2023), 12),
            new Month(new Year(2024), 1),
            new Month(new Year(2024), 2),
            new Month(new Year(2024), 3),
            new Month(new Year(2024), 4),
            new Month(new Year(2024), 5),
            new Month(new Year(2024), 6),
            new Month(new Year(2024), 7),
            new Month(new Year(2024), 8),
            new Month(new Year(2024), 9),
            new Month(new Year(2024), 10),
            new Month(new Year(2024), 11),
            new Month(new Year(2024), 12),
            new Month(new Year(2025), 1),
            new Month(new Year(2025), 2),
            new Month(new Year(2025), 3),
            new Month(new Year(2025), 4),
            new Month(new Year(2025), 5),
            new Month(new Year(2025), 6),
            new Month(new Year(2025), 7),
            new Month(new Year(2025), 8),
            new Month(new Year(2025), 9),
            new Month(new Year(2025), 10),
            new Month(new Year(2025), 11),
            new Month(new Year(2025), 12),
            new Month(new Year(2026), 1),
            new Month(new Year(2026), 2),
            new Month(new Year(2026), 3),
            new Month(new Year(2026), 4),
            new Month(new Year(2026), 5),
            new Month(new Year(2026), 6),
            new Month(new Year(2026), 7),
            new Month(new Year(2026), 8),
            new Month(new Year(2026), 9),
            new Month(new Year(2026), 10),
            new Month(new Year(2026), 11),
            new Month(new Year(2026), 12),
            new Month(new Year(2027), 1),
            new Month(new Year(2027), 2),
            new Month(new Year(2027), 3),
            new Month(new Year(2027), 4),
            new Month(new Year(2027), 5),
            new Month(new Year(2027), 6),
            new Month(new Year(2027), 7),
            new Month(new Year(2027), 8),
            new Month(new Year(2027), 9),
            new Month(new Year(2027), 10),
            new Month(new Year(2027), 11),
            new Month(new Year(2027), 12),
            new Month(new Year(2028), 1),
            new Month(new Year(2028), 2),
            new Month(new Year(2028), 3),
            new Month(new Year(2028), 4),
            new Month(new Year(2028), 5),
            new Month(new Year(2028), 6),
            new Month(new Year(2028), 7),
            new Month(new Year(2028), 8),
            new Month(new Year(2028), 9),
            new Month(new Year(2028), 10),
            new Month(new Year(2028), 11),
            new Month(new Year(2028), 12),
            new Month(new Year(2029), 1),
            new Month(new Year(2029), 2),
            new Month(new Year(2029), 3),
            new Month(new Year(2029), 4),
            new Month(new Year(2029), 5),
            new Month(new Year(2029), 6),
            new Month(new Year(2029), 7),
            new Month(new Year(2029), 8),
            new Month(new Year(2029), 9),
            new Month(new Year(2029), 10),
            new Month(new Year(2029), 11),
            new Month(new Year(2029), 12),
            new Month(new Year(2030), 1),
            new Month(new Year(2030), 2),
            new Month(new Year(2030), 3),
            new Month(new Year(2030), 4),
            new Month(new Year(2030), 5),
            new Month(new Year(2030), 6),
            new Month(new Year(2030), 7),
            new Month(new Year(2030), 8),
            new Month(new Year(2030), 9),
            new Month(new Year(2030), 10),
            new Month(new Year(2030), 11),
            new Month(new Year(2030), 12)
        };

        var actual = dateTime.GetDecadeMonths();
        
        Assert.Equal(expected, actual);
    }
}
